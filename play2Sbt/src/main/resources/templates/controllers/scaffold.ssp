<%@ val controller: String %>
<%@ val model: String %>
<% import mojolly.inflector.InflectorImports._ %>
<% val view = "views.html." + controller.underscore %>
<% val instance = model.camelize %>
package controllers

import play.api.mvc._

import models._
import com.github.aselab.activerecord.dsl._

object ${controller} extends Controller {

  def index = Action {
    Ok(${view}.index(${model}.all.toList))
  }

  def show(id: Long) = Action {
    ${model}.find(id) match {
      case Some(${instance}) => Ok(${view}.show(${instance}))
      case _ => NotFound
    }
  }

  def newPage = Action { implicit request =>
    Ok(${view}.edit(${model}.form, routes.${controller}.create))
  }

  def create = Action { implicit request =>
    ${model}.form.bindFromRequest.fold(
      errors => BadRequest(${view}.edit(errors, routes.${controller}.create)), {
      ${instance} =>
        transaction { ${instance}.save }
        Redirect(routes.${controller}.show(${instance}.id))
    })
  }

  def edit(id: Long) = Action { implicit request =>
    ${model}.find(id) match {
      case Some(${instance}) => Ok(${view}.edit(${model}.form(${instance}), routes.${controller}.update(id)))
      case _ => NotFound
    }
  }

  def update(id: Long) = Action { implicit request =>
    ${model}.find(id) match {
      case Some(${instance}) =>
        ${model}.form(${instance}).bindFromRequest.fold(
          errors => BadRequest(${view}.edit(errors, routes.${controller}.update(id))), {
          ${instance} =>
            transaction { ${instance}.save }
            Redirect(routes.${controller}.index)
        })
      case _ => NotFound
    }
  }

  def delete(id: Long) = Action {
    ${model}.find(id) match {
      case Some(${instance}) =>
        transaction { ${instance}.delete }
        Ok
      case _ => NotFound
    }
  }
}
